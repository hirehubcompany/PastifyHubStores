import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import '../../add to cart/add to cart.dart';

class Categories extends StatefulWidget {
  const Categories({super.key});

  @override
  State<Categories> createState() => _CategoriesState();
}

class _CategoriesState extends State<Categories> {
  int selectedCategoryIndex = 0;
  List<String> categories = [];
  Map<String, List<Map<String, dynamic>>> subcategoriesMap = {};

  @override
  void initState() {
    super.initState();
    fetchCategories();
  }

  Future<void> fetchCategories() async {
    var snapshot = await FirebaseFirestore.instance.collection('all_products').get();

    // Extract categories & subcategories dynamically
    Map<String, List<Map<String, dynamic>>> tempMap = {};
    for (var doc in snapshot.docs) {
      String category = doc['category'];
      String subcategory = doc['subcategory'];
      String image = (doc['images'] != null && doc['images'].isNotEmpty)
          ? doc['images'][0]
          : '';

      if (!tempMap.containsKey(category)) {
        tempMap[category] = [];
      }

      // Add subcategory if not already in the list for that category
      if (!tempMap[category]!.any((s) => s['name'] == subcategory)) {
        tempMap[category]!.add({
          'name': subcategory,
          'image': image,
        });
      }
    }

    setState(() {
      categories = tempMap.keys.toList();
      subcategoriesMap = tempMap;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(

      body: Row(
        children: [
          // LEFT SIDE CATEGORY LIST
          Container(
            width: 100,
            color: Colors.grey[50],
            child: ListView.builder(
              itemCount: categories.length,
              itemBuilder: (context, index) {
                bool isSelected = index == selectedCategoryIndex;
                return GestureDetector(
                  onTap: () {
                    setState(() {
                      selectedCategoryIndex = index;
                    });
                  },
                  child: Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: isSelected ? Colors.white : Colors.grey[50],
                      border: Border(
                        bottom: BorderSide(color: Colors.grey[200]!),
                      ),
                    ),
                    child: Text(
                      categories[index],
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: isSelected ? FontWeight.bold : FontWeight.w500,
                        color: isSelected ? Colors.orange : Colors.black87,
                      ),
                    ),
                  ),
                );
              },
            ),
          ),

          // RIGHT SIDE SUBCATEGORIES
          Expanded(
            child: Container(
              color: Colors.white,
              child: ListView(
                padding: const EdgeInsets.all(16),
                children: [
                  Padding(
                    padding: const EdgeInsets.only(bottom: 12.0),
                    child: Text(
                      categories.isNotEmpty ? categories[selectedCategoryIndex] : '',
                      style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.black87),
                    ),
                  ),
                  GridView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: categories.isNotEmpty
                        ? subcategoriesMap[categories[selectedCategoryIndex]]?.length ?? 0
                        : 0,
                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 3,
                      childAspectRatio: 0.8,
                      crossAxisSpacing: 16,
                      mainAxisSpacing: 16,
                    ),
                    itemBuilder: (context, subIndex) {
                      var sub = subcategoriesMap[categories[selectedCategoryIndex]]![subIndex];
                      return GestureDetector(
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (_) => ProductsListScreen(
                                category: categories[selectedCategoryIndex],
                                subcategory: sub['name'],
                              ),
                            ),
                          );
                        },
                        child: Column(
                          children: [
                            Expanded(
                              child: Container(
                                decoration: BoxDecoration(
                                  color: Colors.grey[200],
                                  borderRadius: BorderRadius.circular(12),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.1),
                                      blurRadius: 6,
                                      offset: const Offset(0, 3),
                                    ),
                                  ],
                                  image: sub['image'] != ''
                                      ? DecorationImage(
                                    image: NetworkImage(sub['image']),
                                    fit: BoxFit.cover,
                                  )
                                      : null,
                                ),
                                child: sub['image'] == ''
                                    ? const Icon(Icons.category, size: 50, color: Colors.grey)
                                    : null,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              sub['name'],
                              style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: Colors.black87),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      );
                    },
                  )
                ],
              ),
            ),
          )
        ],
      ),
    );
  }
}

class ProductsListScreen extends StatelessWidget {
  final String category;
  final String subcategory;

  const ProductsListScreen({
    super.key,
    required this.category,
    required this.subcategory,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      appBar: AppBar(
        title: Text("$subcategory Products"),
        backgroundColor: Colors.orange,
        elevation: 0,
        shape: const Border(bottom: BorderSide(color: Colors.orangeAccent, width: 1)),
      ),
      body: StreamBuilder(
        stream: FirebaseFirestore.instance
            .collection('all_products')
            .where('category', isEqualTo: category)
            .where('subcategory', isEqualTo: subcategory)
            .snapshots(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator(color: Colors.orange));
          }

          var products = snapshot.data!.docs;

          if (products.isEmpty) {
            return const Center(
              child: Text("No products found", style: TextStyle(fontSize: 16, color: Colors.grey)),
            );
          }

          return GridView.builder(
            padding: const EdgeInsets.all(16),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              childAspectRatio: 0.7,
            ),
            itemCount: products.length,
            itemBuilder: (context, index) {
              var product = products[index].data() as Map<String, dynamic>;

              return InkWell(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => ProductDetailsScreen(
                        product: {
                          'id': products[index].id, // Firestore doc ID
                          ...product,               // The rest of the product data
                        },
                      ),
                    ),
                  );
                },
                child: Card(
                  elevation: 4,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                  shadowColor: Colors.black.withOpacity(0.1),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Product image
                      Expanded(
                        child: ClipRRect(
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(16),
                            topRight: Radius.circular(16),
                          ),
                          child: product['images'] != null &&
                              product['images'].isNotEmpty
                              ? Image.network(
                            product['images'][0],
                            width: double.infinity,
                            fit: BoxFit.cover,
                          )
                              : Container(
                            color: Colors.grey[200],
                            child: const Icon(Icons.image, size: 50, color: Colors.grey),
                          ),
                        ),
                      ),

                      // Product details
                      Padding(
                        padding: const EdgeInsets.all(12.0),
                        child: Text(
                          product['productName'] ?? '',
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                            color: Colors.black87,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),

                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 12.0),
                        child: Text(
                          "GHS ${product['price'] ?? ''}",
                          style: const TextStyle(
                            fontSize: 16,
                            color: Colors.green,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),

                      // Add to Cart button
                      Align(
                        alignment: Alignment.centerRight,
                        child: IconButton(
                          icon: const Icon(Icons.add_shopping_cart, color: Colors.orange),
                          onPressed: () {
                            String? userId = FirebaseAuth.instance.currentUser?.uid;
                            if (userId == null) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(content: Text("Please log in first")),
                              );
                              return;
                            }
                            addToCart(context, userId, {
                              'id': products[index].id,
                              ...product,
                            });
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}

class ProductDetailsScreen extends StatefulWidget {
  final Map<String, dynamic> product;

  const ProductDetailsScreen({super.key, required this.product});

  @override
  State<ProductDetailsScreen> createState() => _ProductDetailsScreenState();
}

class _ProductDetailsScreenState extends State<ProductDetailsScreen> {
  int _currentPage = 0;
  final PageController _pageController = PageController();

  @override
  Widget build(BuildContext context) {
    List images = widget.product['images'] ?? [];

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.product['productName'] ?? ''),
        backgroundColor: Colors.orange,
        elevation: 0,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            // Image slideshow
            SizedBox(
              height: 300,
              child: images.isNotEmpty
                  ? Card(
                elevation: 4,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                clipBehavior: Clip.antiAlias,
                child: Stack(
                  alignment: Alignment.bottomCenter,
                  children: [
                    PageView.builder(
                      controller: _pageController,
                      itemCount: images.length,
                      onPageChanged: (index) {
                        setState(() {
                          _currentPage = index;
                        });
                      },
                      itemBuilder: (context, index) {
                        return Image.network(
                          images[index],
                          width: double.infinity,
                          fit: BoxFit.cover,
                        );
                      },
                    ),
                    // Dots indicator
                    Positioned(
                      bottom: 10,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: List.generate(
                          images.length,
                              (index) => AnimatedContainer(
                            duration: const Duration(milliseconds: 300),
                            margin: const EdgeInsets.symmetric(horizontal: 4),
                            width: _currentPage == index ? 12 : 8,
                            height: _currentPage == index ? 12 : 8,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: _currentPage == index ? Colors.orange : Colors.white,
                            ),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              )
                  : Container(
                height: 300,
                decoration: BoxDecoration(
                  color: Colors.grey[200],
                  borderRadius: BorderRadius.circular(16),
                ),
                child: const Icon(Icons.image, size: 100, color: Colors.grey),
              ),
            ),

            const SizedBox(height: 16),

            // Product name
            Text(
              widget.product['productName'] ?? '',
              style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.black87),
            ),

            const SizedBox(height: 8),

            // Price
            Text(
              "GHS ${widget.product['price'] ?? ''}",
              style: const TextStyle(fontSize: 20, color: Colors.green, fontWeight: FontWeight.bold),
            ),

            const SizedBox(height: 24),

            // Contact buttons
            Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.green),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      padding: const EdgeInsets.symmetric(vertical: 14),
                    ),
                    icon: const Icon(Icons.whatshot, color: Colors.green),
                    label: const Text('Whatsapp Us', style: TextStyle(color: Colors.green, fontWeight: FontWeight.w600)),
                    onPressed: () {
                      // Add WhatsApp logic if needed
                    },
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: OutlinedButton.icon(
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.black87),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      padding: const EdgeInsets.symmetric(vertical: 14),
                    ),
                    icon: const Icon(Icons.call, color: Colors.black87),
                    label: const Text('Call Us', style: TextStyle(color: Colors.black87, fontWeight: FontWeight.w600)),
                    onPressed: () {
                      // Add Call logic if needed
                    },
                  ),
                ),
              ],
            ),

            const SizedBox(height: 24),

            // Description Section
            const Text(
              'Description',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black87),
            ),
            const SizedBox(height: 8),
            Text(
              widget.product['description'] ?? 'No description available.',
              style: const TextStyle(fontSize: 14, color: Colors.black54, height: 1.5),
            ),

            const SizedBox(height: 24),

            // Specifications Section
            if (widget.product['specifications'] != null &&
                widget.product['specifications'] is Map<String, dynamic> &&
                widget.product['specifications'].isNotEmpty) ...[
              const Text(
                'Specifications',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 12),
              Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.05),
                      blurRadius: 6,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: Column(
                  children: widget.product['specifications'].entries.map<Widget>((entry) {
                    return Column(
                      children: [
                        Padding(
                          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 16.0),
                          child: Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Icon(Icons.check_circle_outline, color: Colors.orange, size: 20),
                              const SizedBox(width: 12),
                              Expanded(
                                flex: 2,
                                child: Text(
                                  entry.key,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.w600,
                                    fontSize: 14,
                                    color: Colors.black87,
                                  ),
                                ),
                              ),
                              Expanded(
                                flex: 3,
                                child: Text(
                                  entry.value is List
                                      ? (entry.value as List).join(', ')
                                      : entry.value.toString(),
                                  style: const TextStyle(
                                    fontSize: 14,
                                    color: Colors.black54,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                        // Divider between items
                        if (entry.key != widget.product['specifications'].keys.last)
                          Divider(height: 1, color: Colors.grey[200]),
                      ],
                    );
                  }).toList(),
                ),
              ),
            ] else
              const Text(
                "No specifications available.",
                style: TextStyle(fontSize: 14, color: Colors.grey),
              ),

            const SizedBox(height: 32),

            // Add to Cart Button
            ElevatedButton.icon(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                elevation: 2,
              ),
              icon: const Icon(Icons.add_shopping_cart, color: Colors.white),
              label: const Text(
                "Add to Cart",
                style: TextStyle(fontSize: 16, color: Colors.white, fontWeight: FontWeight.bold),
              ),
              onPressed: () {
                String? userId = FirebaseAuth.instance.currentUser?.uid;
                if (userId == null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text("Please log in first")),
                  );
                  return;
                }

                addToCart(context, userId, {
                  'id': widget.product['id'],
                  ...widget.product,
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}